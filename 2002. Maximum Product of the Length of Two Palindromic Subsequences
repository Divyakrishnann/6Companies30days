class Solution {
    public int maxProduct(String s) {
        int n = s.length();
        int[] maxLen = new int[1 << n]; 
        for(int mask=0;mask<(1<<n);mask++){
            StringBuilder sub= new StringBuilder();
            for(int j=0;j<12;j++){
                if((mask & (1<<j) )> 0){
                    sub.append(s.charAt(j));
                }
            }
            if(isPalindromic(sub.toString())){
                maxLen[mask] = sub.length();
            }
        }
        int res =0;
        for (int mask1 = 1; mask1 < (1 << n); mask1++) {
            for (int mask2 = mask1 + 1; mask2 < (1 << n); mask2++) {
                if ((mask1 & mask2) == 0) { // disjoint masks
                    res = Math.max(res, maxLen[mask1] * maxLen[mask2]);
                }
            }
        }
        return res;
    }

    public boolean isPalindromic(String str) {
        int left = 0, right = str.length() - 1;
        while (left < right) {
            if (str.charAt(left++) != str.charAt(right--)) return false;
        }
        return true;
    }
}
